############################################################
# [A-1] 천만까지 합 구하기
############################################################

##import datetime
##
##tot = 0
##start = datetime.datetime.now()
##
##for i in range(10000001): tot += i
##
##end = datetime.datetime.now()
##print("time =", (end - start), tot)

############################################################
# [A-2] 천만까지 합 구하기
############################################################

##import datetime
##
##start = datetime.datetime.now()
##
##tot = sum(range(10000001))
##
##end = datetime.datetime.now()
##print("time =", (end - start), tot)

############################################################
# [B-1] 100까지 인쇄하기
############################################################

##import datetime
##
##start = datetime.datetime.now()
##
##for i in range(101): print(i, end=' ')
##
##end = datetime.datetime.now()
##print()
##print("time =", (end - start))

############################################################
# [B-2] 100까지 인쇄하기
############################################################

##import datetime
##
##start = datetime.datetime.now()
##
##print(' '.join(str(i) for i in range(101)))
##
##end = datetime.datetime.now()
##print("time =", (end - start))

############################################################
# [1-1] Hello Python
############################################################

##print('Hello')
##print("Python")
##print('홍길동', '나이 =', 20, "세")

############################################################
# [1-2] 파이썬의 주석
############################################################
##
##print( "Hello" ) #Hello 인쇄합니다 print( "Python" )
##print( "World" )

############################################################
# [1-3] 들여쓰기
############################################################

##print('Hello')
##  print("Python")

############################################################
# [1-4] 줄 연결과 분리 
############################################################

##print("Good"); print("Python")
##
##print("Best \
##           Python")

############################################################
# [1-5] 출력할 내용의 연결과 분리
############################################################

##print( "Hi", "Python" )
##
##print( "Good", "Python", sep = "***" )
##
##print( "Hello" )
##print( )
##print( "Python" )
##
##print( "Welcome", "Python", sep = " ::: ", end = " ")
##print( "World!" )

############################################################
# [1-6] print 연습1
############################################################

print( '2020', '12', '25', sep='-' )

############################################################
# [1-7] print 연습2
############################################################

##print( "kim", end="@" )
##print( "codexpert",end = '.' ) 
##print( "org" )

############################################################
# [2-1] 정수형(int) 상수
############################################################
##
print( 12346578901234567890 )
print( 15, 0b1111, 0o17, 0xf )

print( True == 1, 5 > 10)

############################################################
# [2-2] 실수형(float) 상수
############################################################

##print( 3.14, -3.14 )
##print( 1e-3, 1e3 )

############################################################
# [2-3] 변수 작명 예
############################################################
##
##abc1 = 10
##Abc1 = 20
##my_name = 'KIM'
##_my_name = 'LEW'
##print('abc1', abc1, 'Abc1', Abc1, my_name, _my_name)

############################################################
# [2-4] 변수에 값 대입
############################################################

##name = 'orange'
##price = 200
##print('name =', name, 'price =', price)
##price = 300
##print('name =', name, 'price =', price)

############################################################
# [2-5] 변수의 타입
############################################################

##a = 10
##b = 3.14
##c = 'hello'
##print( type(a), type(b), type(c) )

############################################################
# [2-6] 함수의 구성과 호출, 리턴
############################################################

##a = 10
##b = 3.14
##print(type(a, b))
##x = print(type(a), type(b))
##print(x)

############################################################
# [2-7] 변수의 동적 타입(type) 결정
############################################################

##a = 10
##b = 3.14
##c = 'hello'
##print( a, b, c )
##print( type(a), type(b), type(c) )
##
##a = c
##b = 100
##c = 5.125
##print( a, b, c )
##print( type(a), type(b), type(c) )

############################################################
# [2-8] 여러 변수의 대입
############################################################

##a, b, c = 10, 3.14, "hello"
##print( a, b, c )

############################################################
# [2-9] 기본 산술 연산자의 이해
############################################################

##print( 10+3, 10-3, 10*3, 10/3 )
##print( 10//3, 10%3, 23//10, -23//10, 2.5//2, 2.5%2 )
##print( 10+20/2, (10+20)/2 )
##
##a, b = 10, 20
##print(a + b, 3.14 - 1.2, a * b)
##print('Hello' + ' ' + 'Python')
##print('Hello' * 2)

############################################################
# [2-10] KB의 메모리 용량 계산하기
############################################################

##x = 30
##y = x*1024
##
##print( y, "bytes" )

############################################################
# [2-11] 원의 면적 구하기
############################################################
##
##r, pi = 3, 3.14
##result = r*r*pi
##
##print( result )

############################################################
# [2-12] //, % 연산자 사용 연습
############################################################

##n = 1234
##d1 = n//1000
##d2 = n%1000//100
##d3 = n%100//10
##d4 = n%10
##print( d1, d2, d3, d4 )

############################################################
# [2-13] 100원 미만 절사
############################################################

##p = 12345678
##r = p//100*100
##print( r )

############################################################
# [3-1] 문자열 상수 표기법
############################################################

##print( 'Hell', '12', 'A', '1', "2", '한글'  )
##print( '''Good 
##          Bye''')
##print( """Good 
##          Bye""")

############################################################
# [3-3] 특수 기능 문자(Escape Sequence)
############################################################

##print( "Hi\nPython" )
##print( "Hi\tPython" )
##
##print( 'hello "HELLO" hello' )
##print( "hello 'HELLO' hello" )
##
##print( "It's nice" )
##print( 'It\'s nice' )
##print( "Back Slach => \\" )
##
##print( r"Hi\tPython" )

############################################################
# [3-4] 디렉토리 형식 문자열 인쇄
############################################################
##
##print( r'C:\temp' )

############################################################
# [3-5] 문자열 반복 및 연결
############################################################

##print("Hi"*3 + "Python")

############################################################
# [3-6] Bytes 타입
############################################################

##print("String type")
##print(b"Bytes type")
##print(B"Bytes type")

############################################################
# [3-7] 정수와 문자열의 연산
############################################################

##print( 1024 + "bytes" )

############################################################
# [3-8] 타입(type) 확인
############################################################

##print(type(1))
##print(type(0o10))
##print(type(0x10))
##print(type(0b1011))
##print(type(True))
##print(type(1.0))
##print(type("1"))
##print(type('A'))
##print(type('Hello'))
##print(type(b'Hello'))

############################################################
# [3-9] 데이터 타입(type) 변환
############################################################

##print( str(1024) + "bytes" )
##print( int("123"), int(3.14), int("15", base = 16) )
##print( float("3.14"), float(3) )
##
###print( int('3.14') )
###print( float('35', base = 16) )

############################################################
# [3-10] 형 변환 built-in 함수
############################################################

##print('str(10)', str(10))
##print('str(3.14)', str(3.14))
##print("str('apple')", str('apple'))
##print("int('13')", int('13'))
##print('int(4.89)', int(4.89))
##print('int(-10)', int(-10))
##print("int('13', base=8)", int('13', base=8))
##print("int('3.14')", int('3.14'))
##print("int(13, base=8)", int(13, base=8))
##print('float(5)', float(5))
##print("float('3.14')", float('3.14'))
##print('float(1.78)', float(1.78))
##print("float('35', base = 16)", float('35', base = 16))

############################################################
# [3-11] 문자열 정수 연산
############################################################
##
##a, b = '10', '20'
##r = int(a) + int(b)
##print(r)

############################################################
# [3-12] 제품 판매가격 계산
############################################################

##p, t = '123456', '12.5'
##
## #코드 작성
##
##total = int(p) + int(p)*float(t)/100
##print( int(total)//1000*1000)

############################################################
# [4-1] 키보드로 입력 받기
############################################################

##a = input("이름을 입력하시오 => ")
##print( a )
##print( input("나이를 입력하시오 => ") )

############################################################
# [4-2] 메시지 없이 입력 받기
############################################################

##a = input()
##print( a )
##print( input( ) )

############################################################
# [4-3] 키보드로 2개의 정수 입력 받기
############################################################

##a = input()
##b = input()
##
### 코드 수정
##
##print( int(a) + int(b) )

############################################################
# [4-4-1] 키보드로 이름 3개 입력받기
############################################################

##a = input()
##b = input()
##c = input()
##print( a, b, c )

############################################################
# [4-4-2] 키보드로 이름 3개 입력받기
############################################################

##a, b, c = input()
##print( a, b, c )

############################################################
# [4-5] str.split() 메서드
############################################################

##x = str.split('kim lee park')
##
##s = 'kim lee park'
##y = s.split()
##
##z = 'kim lee park'.split()
##
##print(x, y, z, sep = '\n')

############################################################
# [4-6-1] split()을 이용한 이름 3개 입력 받기
############################################################

##x = input()
##a, b, c = str.split(x)
##print( a, b, c )

############################################################
# [4-6-2] split()을 이용한 이름 3개 입력 받기
############################################################

##x = input()
##a, b, c = x.split()
##print( a, b, c )

############################################################
# [4-6-2] split()을 이용한 이름 3개 입력 받기
############################################################

##a, b, c = input().split()
##print( a, b, c )

############################################################
# [4-7-1] 2개의 정수를 한 줄에 입력 받기
############################################################

##a, b = input().split()
##print(type(a), type(b))
##
##a, b = int(a), int(b)
##print( a + b )

############################################################
# [4-8] 정수 3개를 받아서 합계를 인쇄하는 코드를 설계
############################################################

### 코드 작성
##
##a,b,c = input().split()
##s = int(a)+ int(b)+ int(c)
##print( s )

############################################################
# [4-9] 문자열과 정수 2개를 입력 받는 코드
############################################################

### 코드 작성
##
##s = input()
##a, b = input().split()
##a, b = int(a), int(b)
##print( s )
##print( a + b )

############################################################
# [4-10] 이름, 키, 나이를 입력 받아 인쇄하기
############################################################

### 코드 작성
##a, b, c = input().split()
##b, c = float(b), int(c)
##print( type(a), type(b), type(c) )
##print( 'name = ', a, 'height = ', b, 'age = ', c )

############################################################
# [4-11] 여러 문자열을 정수로 변환 하기
############################################################

##a1, b1, c1, d1 = '10', '20', '30', '40'
##a2, b2, c2, d2 = int(a1), int(b1), int(c1), int(d1)
##a3, b3, c3, d3 = map( int, ( a1, b1, c1, d1 ) )
##print( a2 + b2 + c2 + d2 )
##print( a3 + b3 + c3 + d3 )

############################################################
# [4-12] map 함수 동작 이해
############################################################

##def func(n) : print('func', n); return n * n
##
##a, b, c, d = map(func, (2, 4, 6, 8))
##print(a, b, c, d)

############################################################
# [4-13] 여러 정수 입력 받기
############################################################

##a, b, c, d = input().split()
##a, b, c, d = int(a), int(b), int(c), int(d)
##print( a + b + c + d )

############################################################
# [4-14-1] map 함수를 이용한 여러 정수 입력 받기
############################################################

##x = input().split()
##a, b, c, d = map(int, x)
##print( a + b + c + d )

############################################################
# [4-14-2] map 함수를 이용한 여러 정수 입력 받기
############################################################

##a, b, c, d = map(int, input().split())
##print( a + b + c + d )

############################################################
# [4-15] ,로 분리된 여러 정수 입력 받기
############################################################
##
##a, b, c = map(int,input().split(sep=','))
##print(a+b+c)



############################################################
# [4-16] 여러 줄로 입력되는 값 받기
############################################################
##a = int(input())
##b,c = map(int, input().split(sep='/'))
##print(a+b+c)

############################################################
# [4-17] 몫과 나머지 계산
############################################################
##a, b = map(int, input().split())
##print(a//b, a%b)


############################################################
# [4-18] 문자열 반복 인쇄
############################################################
##a, b = input().split()
##b = int(b)
##print(a*b)

############################################################
# [4-19] 세금과 합계 계산
############################################################

# 코드 작성
##p, r = map(float, input().split())
##p = int(p)
##tax = p * r / 100
##total = p + tax
##print("tax=", tax)
##print("total=", total)

############################################################
# [4-20] 세개의 정수들의 합계와 평균
############################################################
##
##x = sum(map(int, input().split()))
##print(x, x/3)

############################################################
# [4-21] 파일로 입력 받기
############################################################

##import sys
##
##back = sys.stdin
##sys.stdin = open("input.txt")
###sys.stdin = open(r"C:\input2.txt")
###sys.stdin = open(r".\my_package\input1.txt")
##
##a = int(input())
##b, c = input().split()
##d, e, f = input().split(sep = ",")
##print(a, b, c, d, e, f)
##sys.stdin.close()
##
##sys.stdin = back
##a = input()
##print(a)

############################################################
# [5-1] Formatted string 
############################################################

##n = input('이름 : ')
##a = int(input('나이 : '))
##
##s1 = '이름 : %s, 나이 : %d세' % (n, a)
##s2 = '이름 : {}, 나이 : {}세'.format(n, a)
##s3 = f'이름 : {n}, 나이 : {a}세'
##
##print('이름 :', n, '나이 :', a, '세')
##print(s1)
##print(s2)
##print(s3)

############################################################
# [5-2] print 함수로 콘솔에 출력하기
############################################################

##print('홍 길동')
##print('홍', '길동')
##print('%s' % '홍 길동')
##print('{}'.format('홍 길동'))
##print(f'{"홍 길동"}')

############################################################
# [5-3] 포맷 지정 인쇄
############################################################

##a, b = 10, 3
##c = a / b
##print( "10/3=", c )
##print( "10/3= %.3f" % c )
##print( "10/3= {:.3f}".format(c) )
##print( f"10/3= {c:5.4}" )

############################################################
# [5-4] 포맷화된 출력 - % 연산자
############################################################

##print("%s, %s" % ("ABC", 123) )
##print("%d, %f" % (3.14, 3.14) )
##print("%d, %#o, %#x, %#X" % (15,15,15,15))
##print("%d%%" % 100)
##
##print("%c, %c" % ('A', 65) )

############################################################
# [5-5] 정렬방식, 폭크기, 실수 정밀도를 지정
############################################################

##print("|%5s|" % "ABC")
##print("|%-5s|" % "ABC")
##print("|%5d|" % 123)
##print("|%-5d|" % 123)
##print("|%5.2f|" % 1.234)
##print("|%05d|" % 123)

############################################################
# [5-6] 포맷지시자 요약
############################################################

##print('%c' %97)
##print('%d' %20)
##print('%s' %'Hello')
##print('%s' %20)
##print('%f' %1.23)
##print('rate is %d%%' %70)
##print('%o' %100)
##print('%X' %11)
##print('%7d' %1234)
##print('%07d' %1234)
##print('%-7d.' %1234)
##print('%5.2f' %1.567)
##print('%d %d' %(10, 20))
##print('%s' %10)
##print('100%')
##print('%d%%' %100)
##print('%d%' %100)

############################################################
# [5-7] format() 메써드
############################################################

##r=3
##pi=3.14
##area=r*r*3.14
##print( "{0}*{0}*{1}={2}".format(r, pi, area ) )

############################################################
# [5-8] format()을 이용한 확장 기능
############################################################

##print("|{0:5s}|{0:5}|".format("Hi"))
##print("|{0:5.1f}|{0:05.1f}|".format( 1.23 ))
##print("|{0:*<6}|{0:*^6}|{0:*>6}|".format("Hi"))
##print("{:,}".format(1234))
##print("{{ {} }}".format(123) )

############################################################
# [5-9] format 메서드 요약
############################################################

##name = 'Julie'
##age = 42
##f1=11.3456
##a = [6, 2, 4]
##b = {'x':1, 'y':2}
##print('{}, {}'.format(name, age))
##print('{{}}  {{{}}}'.format(name))
##print('{:.4}-{:5.3}'.format(f1, f1))
##print('{:>5}-{:0>5}'.format(12,34))
##print('{:<5}-{:0^5}'.format(12,34))
##print('{:,}'.format(123456789))
##print('{0}, {1}'.format(name, age))
##print('{a} {b}'.format(b=10, a='X'))
##print('{0} {2} {1}'.format(*a))
##print('{x} {y}'.format(**b))

############################################################
# [5-10] f-string 요약
############################################################

##name = 'Julie'
##age = 42
##f1 = 11.3456
##print(f'{name }, {age-20}')
##print(f'{f1:6.4}')
##print(f'name = {name}')
##print(f'{{}} {{{name}}}')
##print(f'{age:>5}-{age:0>5}')
##print(f'{age:<5}-{age:0^5}')
##print(f'{123456789:,}')

############################################################
# [5-11] 문자열을 중앙에 배치하기
############################################################



############################################################
# [5-12] 세개의 정수들의 합계와 평균
############################################################



############################################################
# [6-1] 정수들의 합 구하기 
############################################################

##a, b, c = map(int, input().split())
##print(a + b + c)

############################################################
# [6-2] 정수들의 합 구하기 
############################################################

##t = (10, 20, 30, 20)
##l = [10, 20, 30, 20]
##s = {10, 20, 30, 20}
##
##print(type(t), t, sum(t))
##print(type(l), l, sum(l))
##print(type(s), s, sum(s))
##
##print(sum((10, 20, 30, 20)), sum([10, 20, 30, 20]), sum({10, 20, 30, 20}))

############################################################
# [6-3] map 함수의 argument 분석 
############################################################

##a, b, c = map(int, '10', '20', '30')
##a, b, c = map(int, ('10', '20', '30'))
##print(a + b + c)

############################################################
# [6-4] sum을 이용한 실수 3개의 합 구하기
############################################################

##a, b, c = map(float, input().split())
##
##print(a + b + c)
##print(sum((a,b,c)))
##print(sum([a,b,c]))
##print(sum([a,b,c], 100))
##print(sum([10.5, 3.14, 10], 100))

############################################################
# [6-5] 문자열 입력의 개수가 맞지 않을 경우
############################################################

##a, b, c = input().split()
##print(a, b, c)

############################################################
# [6-6] split() 메서드의 타입
############################################################

##x = input().split()
##print(type(x))
##print(x)

############################################################
# [6-7] map() 함수의 타입
############################################################

##x = map(int, input().split())
##print(type(x))
##print(x)

############################################################
# [6-8-1] 개수가 지정되지 않은 정수들의 합
############################################################

##t = map(int, input().split())
##print(sum(t))

############################################################
# [6-8-2] 개수가 지정되지 않은 정수들의 합
############################################################

##print(sum(map(int, input().split())))

############################################################
# [6-9] iterator 타입의 성격
############################################################

##t = map(int, input().split())
##print(sum(t))
##print(sum(t))

############################################################
# [6-10] 실수들의 합과 평균 구하기
############################################################
##n = int(input())
##x = sum(map(float,input().split()))
##print(x, x/n)


############################################################
# [6-11] 컨테이너의 아이템 접근
############################################################

##c = 'Hello'
##t = (1, 3.14, 'name')
##l = [1, 3.14, 'name']
##k = {'id':1, 2:3.14, 'tag':'name'}
##s = {1, 3.14, 'name', 1, 3.14}
##
##print(c[0], c[1], c[-1], c[-2])
##print(t[0], t[1], t[-1], t[-2])
##print(l[0], l[1], l[-1], l[-2])
##print(k['id'], k[2], k['tag'])
##print(s)

############################################################
# [6-12] Mutable 속성
############################################################

##c = 'Hello'
##t = (1, 3.14, 'name')
##l = [1, 3.14, 'name']
##k = {'id':1, 1:3.14, 'tag':'name'}
##
##print(c, t, l, k, sep = '\n')
##
##c[0] = 'K'
##t[1] = 5.125
##l[2] = 'score'
##k['id'] = 100
##
##print(c, t, l, k, sep = '\n')

############################################################
# [6-13] 아이템의 추가
############################################################

##l = [1, 3.14, 'name']
##k = {'id':1, 'rate':3.14, 'tag':'name'}
##s = {1, 3, 5, 2}
##
##print(l, k, s, sep = '\n')
##
##l.append("song")
##l.insert(1,"lew")
##k['num'] = 200
##s.add(10)
##
##print(l, k, s, sep = '\n')

############################################################
# [6-14] 새치기1
############################################################

##l = ['kim', 'lee', 'moon', 'lew', 'kang', 'song']
##
##n, s = input().split()
##l.insert(int(n)-1, s)
##
##print(l)

############################################################
# [6-15] 다중 컨테이너 생성과 아이템 접근
############################################################

##t1 = ((1, 3.14, 'name'), (10,),  ('kim', 30, 5.12))
##t2 = ([1, 3.14, 'name'], 'Yoon', {'a':1, 'b':3.14})
##l1 = [[1, 3.14, 'name'], [10],   ['kim', 30, 5.12]]
##l2 = [(1, 3.14, 'name'), 'Yoon', {'a':1, 'b':3.14}]
##
##print(t1, t2, sep = '\n')
##print(t1[0][0],     t1[-1][-1])
##print(t2[0][2][3],  t2[2]['b'])
##
##print(l1, l2, sep = '\n')
##print(l1[0][0],     l1[-1][-1])
##print(l2[0][2][3],  l2[2]['b'])

############################################################
# [6-16] 튜플 pack, unpack
############################################################

##t1 = (1, 2, 3)
##print( type(t1), t1 )
##
##t2 = 1, 2, 3
##print( type(t2), t2 )
##
##t3 = "kim", "lee", "lew"
##print( type(t3), t3 )
##
##t4 = 1, 2, 3
##a, b, c = t4
##print(a, b, c)
##
##a, b, c = "kim"
##print(a, b, c)

############################################################
# [6-17] swap 구현
############################################################
##
##a = 10
##b = 20
##print(a, b)
##
### swap 코드를 1줄로 작성한다
##b, a = a, b
##print(a, b)

############################################################
# [6-18] iterable 타입의 unpack
############################################################

##t1, t2, t3 = (1,2,3)
##l1, l2, l3 = [1,2,3]
##s1, s2, s3 = {1,2,3}
##d1, d2, d3 = {'a':1, 'b':2, 'c':3}
##c1, c2, c3 = 'str'
##m1, m2, m3 = map(int, '123')
##print(t1,t2,t3,l1,l2,l3,s1,s2,s3,d1,d2,d3,c1,c2,c3,m1,m2,m3)

############################################################
# [6-19] dict의 unpack
############################################################

##d = {'a':1, 'b':2, 'c':3}
##
##a1, a2, a3 = d.keys()
##b1, b2, b3 = d.values()
##c1, c2, c3 = d.items()
##
##print(a1, a2, a3, b1, b2, b3, c1, c2, c3)
##
##a1, a2, a3 = {'a':1, 'b':2, 'c':3}.keys()
##b1, b2, b3 = {'a':1, 'b':2, 'c':3}.values()
##c1, c2, c3 = {'a':1, 'b':2, 'c':3}.items()
##
##print(a1, a2, a3, b1, b2, b3, c1, c2, c3)

############################################################
# [6-20] 부분 Unpack 옵션 : *
############################################################

##t = (10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
##a, *b = t
##print(a, b)     
##*a, b = t
##print(a, b)     
##a, b, *c, d, e = t
##print(a, b, c, d, e)  

############################################################
# [6-21] 일등과 꼴찌만 기억하는 사회
############################################################

### 코드 작성
##
##x = input().split()
##first = x[0]
##last = x[-1]
##print(first, last)  

############################################################
# [6-22] range 함수
############################################################

##import sys
##
##print(range(5))
##print(sys.getsizeof(range(100)))
##print(sys.getsizeof(range(100000000)))

############################################################
# [6-23] range 함수의 속성
############################################################

##a = range(1,5)
##b, c = range(2)
##d, *e, f = a
##
##print(a[1], b, c)
##print(d, e, f)
##print(a)
##print(*a)
##
##print(*range(5))
##print(*range(2,5))
##print(*range(0,6,2))
##print(*range(4,-1,-1))

############################################################
# [6-24] 컨테이너 변환 함수 이해
############################################################

##t1 = (1,2,3,4)
##t2 = ((1,2,3),(4,8),(1,2,3),(6,))
##l1 = [1,2,3,4,4,4,5]
##l2 = [[1,2,3],[4,8],[6],[4,8]]
##s1 = {1,2,3,3,4}
##s2 = {(1,2,3,3,4),(4,8,9),(6,6),(4,8,9)}
##d1 = {'a':1,'b':2,'c':3}
##
##a, b, c = str(3.14), str(t1), str(t2)
##d, e    = str(l1),   str(l2)
##f, g, h = str(s1),   str(s2), str(d1)
##print(a, b, c, d, e, f, g, h, sep='\n')
##print()
##
##x = map(tuple, (l1, l2, s1, s2, d1.items()))
##print(*x, sep='\n')
##print()
##
##x = map(list, (t1, t2, s1, s2, d1.items()))
##print(*x, sep='\n')

############################################################
# [6-25] set 변환 함수 이해
############################################################

##t1 = (1,2,3,4)
##t2 = ((1,2,3),(4,8),(1,2,3),(6,))
##l1 = [1,2,3,4,4,4,5]
##l2 = [[1,2,3],[4,8],[6],[4,8]]
##d1 = {'a':1,'b':2,'c':3}
##t3 = ({'a':1,'b':2}, {'c':3, 'd':4})
##
##s = {{1,2},{3,3,4}}
##x = set(l2)
##x = set(t3)
##
##x = map(set, (t1, t2, l1, d1.items()))
##print(*x, sep='\n')
##print()

############################################################
# [6-26] dict 변환 함수 이해
############################################################

##t1 = ({'a',1},{'b',2},{'c',3})
##l1 = [['a',1],['b',2],['c',3]]
##s1 = {('a',1),('b',2),('c',3)}
##
##x = map(dict, (t1, l1, s1))
##print(*x, sep='\n')
##print()
##
##t2 = (('a',10),('a',20),('c',40))
##l2 = [['a',10],['c',20],['c',40]]
##
##x = map(dict, (t2, l2))
##print(*x, sep='\n')
##print()
##
##t3 = (((1,2), 'abc'), ((3,4,5), 10))
##print(dict(t3))
##print()
##
##f1 = (([1,2], 10), ([3,4], 2))
##f2 = (({1,2}, 10), ({3,4}, 2))
##f3 = (({1:2}, 10), ({3:4}, 2))
##print(*map(dict, (f1, f2, f3)), sep='\n')

############################################################
# [6-27] 새치기2
############################################################

##t = ('kim', 'lee', 'moon', 'lew', 'kang', 'song')
##
### 코드 작성
##
##print(t)

############################################################
# [6-28] in, not in 연산
############################################################

##t = ([1,2,3,1], {1,2}, (1,2,3))
##l = [[1,2,3,1], {1,2}, (1,2,3)]
##s = {1, 2, (1,2,3)}
##d = {'a':1, 'b':2, 'c':3}
##r = range(1, 5)
##m = map(int, '1234')
##
##x = {1, 2}
##print({1,2} in t, x in l, 1 not in s, 'a' in d, 3 in r, 1 in m, 1234 in m)
##print(('a',1) in d.items(), 2 in d.values(), 'c' in d.keys())

############################################################
# [7-1] 주요 built-in 함수 이해
############################################################

##print(abs(-3), abs(-3.8))
##print(pow(20, 3), pow(4, 2, 3))
##
##a, b = divmod(10,3)
##print(a, b)
##print(divmod(10,3))
##print(*divmod(10,3))
##
##print(max(1,  3.4,  5.7),   min(1, -3.4, -5.7))
##print(max([10, 3, 24, 7.5]), min('abcdABCD'), min('kim','kang'))
##
##print(round(3.37), round(3.73), round(-3.37), round(-3.73))
##print(round(3.5),  round(4.5),  round(-3.5),  round(-4.5))
##print(round(1236, -2), round(1236, -1), round(3.745, 1), round(3.745, 2))
##print(round(12350, -3), round(1250.0, -2), round(1250.5, 0), round(1250.5))
##
##print(oct(100),  hex(100), bin(100))
##print(chr(0x41), ord('A'), chr(8364), ord('€'), ord('C') - ord('A'))

############################################################
# [7-2] 10진수를 2진수로 
############################################################



############################################################
# [7-3] 정수들의 절대값 구하기
############################################################



############################################################
# [7-4] 키 재기
############################################################



############################################################
# [7-5] eval, exec 함수 
############################################################

##print(eval('1+2'))
##print(eval("'good ' + 'morning'"))
##print(eval('chr(65)'))
##print(eval('max(1,2,3)'))
##eval('a = 3')
##exec('a = 3')
##eval('if a > 0 : print(a)')
##exec('if a > 0 : print(a)')

############################################################
# [7-6] 사칙연산 계산시 구현 
############################################################
	



############################################################
# [7-7] exec를 이용한 파이썬 인터프리터 구현
############################################################



############################################################
# [8-1] 컨테이너 관련 built-in 함수 이해
############################################################

##t1 = (1,2,3,4)
##t2 = ((1,2,3),(1,3),(0,))
##l1 = [1,2,3,4]
##l2 = [[1,2,3],[1,3],[0]]
##
##print(len(t1),len(t2),len(l1),len(l2))
##print(sum(t1),sum(t2[0]),sum(l1),sum(l2[1]))
##print(min(t1),max(t2),min(l1),max(l2))
##print(max(t2[0]),max(l2[0]))
##
##s1 = {1,2,3,3,4}
##s2 = {(1,2,3,3,4),(4,8,9),(4,9),(4,8,9)}
##d1 = {'a':1,'b':2,'c':3}
##
##print(len(s1),len(s2),len(d1))
##print(s1, s2)
##print(sum(s1))
##print(min(s1),max(s2),max(d1))

############################################################
# [8-2] dict 메서드 활용
############################################################

##d = {'a':1,'b':3,'c':2}
##a = d.keys()
##b = d.values()
##c = d.items()
##
##print(d, d['a'], sep = '\n')
##print(a, b, c, sep = '\n')
##
##print(min(d))
##print(max(d.keys()))
##print(max(d.values()))
##print(max(d.items()))

############################################################
# [8-3] 컨테이너 정렬 함수 이해
############################################################

##t1 = (3,1,1,4)
##t2 = ((3,2,5),(4,3),(6,))
##l1 = [3,1,1,4]
##l2 = [[7,2,3],[4,8],[6]]
##s1 = {6,9,3,3,4}
##s2 = {(8,4,3,3,5),(4,8,9),(6,4),(4,8,9)}
##d1 = {'a':1,'b':2,'c':3}
##
##t3, t4 = sorted(t1), sorted(t2)
##l3, l4 = sorted(l1, reverse = True), sorted(l2)
##s3, s4 = sorted(s1), sorted(s2)
##d3 = sorted(d1.items(), reverse = True)
##
##print(t1, t3, t4, '', sep = '\n')
##print(l1, l3, l4, '',sep = '\n')
##print(s1, s3, s4, '',sep = '\n')
##print(d1, d3, sep = '\n')

############################################################
# [8-4] Sequence Type 메서드
############################################################

##t = (1,2,3,4,5,1,2,3)
##
##print(t.index(3))
##print(t.index(3,2))
##print(t.index(3,3))
##print(t.index(3,2,4))
##print(t.index(3,3,5))
##print(t.index(3,3,100))
##print(t.count(3))
##print(t.count(9))

############################################################
# [8-5] 최대값 구하기
############################################################




############################################################
# [8-6] 튜플로 5개 입력 받아서 인쇄하기
############################################################




############################################################
# [8-7] 리스트로 n개 입력 받아서 최대값 구하기
############################################################




############################################################
# [8-8] n명 이름 중복 제거하기
############################################################





############################################################
# [8-9] n개 정수 입력 받아 오름차순, 내림차순으로 정렬하기
############################################################




############################################################
# [8-10] 과일 가격을 알려주세요
############################################################

##f = ('apple', 'banana', 'mango', 'pineapple', 'orange')
##p = (1000, 800, 2000, 5200, 400)
##
### 코드 작성

############################################################
# [8-11] dict를 이용한 과일 가격 알려주세요
############################################################

##d = {'apple':1000, 'banana':800, 'mango':2000, 'pineapple':5200, 'orange':400}
##
### 코드 작성

############################################################
# [9-1] 실수 값들을 가까운 정수로 변환하여 인쇄
############################################################

##f = (3.14, -5.625, 100.4, 25.8)
##
### 코드 작성

############################################################
# [9-2] 인자 2개인 함수의 map 함수 사용
############################################################

##v = (10, 4, 2, -10)
##e = (2,  3, 4,  2)
##
### 코드 작성

############################################################
# [9-3] divmod 함수의 map 함수 사용
############################################################

##a = (10, 5, 20, 35)
##b = (3, 3, 6, 5)
##
### 코드 작성

############################################################
# [9-4] range, map 함수는 iterable이다
############################################################

##s = ('-10','3','-3')
##print(*map(abs, (map(int, s))))
##print(*map(abs, range(-4,5)))

############################################################
# [9-5] map 함수 주의사항
############################################################

##print(*map(print, (1,2,3,4)))

############################################################
# [9-6] zip 활용 RBG 이미지 묶기
############################################################

##r = (52, 255, 39, 132)
##g = (19, 63, 227, 197)
##b = (0, 68, 255, 187)
##
### 코드 작성
##
##print(img)

############################################################
## [9-7] dict 형식으로 과일 tag 만들고 가격 출력하기
############################################################

##f = ('apple', 'orange', 'banana', 'mango')
##p = (100, 80, 120, 90)
##
### 코드 작성
##
##print(tag)
##print(price)

############################################################
# [9-8-1] 배열 transpose
############################################################

##m = ((1,2,3,4),(5,6,7,8),(9,10,11,12))
##
##t = # 코드 작성
##
##print(type(t), t)

############################################################
# [9-8-2] 배열 transpose => 코드 개선
############################################################

##m = ((1,2,3,4,5),(6,7,8,9,10),(11,12,13,14,15),(16,17,18,19,20))
##
##t = # 코드 작성
##
##print(type(t), t)

############################################################
# [9-9] enumerate 함수 분석
############################################################

##t = ('kim', 'lee', 'park')
##x1 = zip(range(len(t)), t)
##
##x2 = enumerate(t)
##x3 = enumerate(t, 10)
##
##print(*x1)
##print(*x2)
##print(*x3)

############################################################
# [9-10] 과일 품목별 일련번호 부여하여 dict로 생성하기
############################################################

##f = ('apple', 'orange', 'banana', 'mango')
##
##tag = # 코드 작성
##
##print(tag)

############################################################
# [10-1] Object 정보 확인을 위한 Built-in 함수
############################################################

##print(dir(int))
##print(dir(3))
##print(int, type(int), type(3))
##print(id(int), id(3))
##print(isinstance(3, type))
##
##a = 3
##print(a is 3, a is not 3)

############################################################
# [10-2] Instantiation
############################################################

##print(int.__add__(3,4))
##x = int(3)
##print(x.__add__(4))
##print(int(3).__add__(4))
##print((3).__add__(4))
##
##print(str.upper("Hello"))
##x = str("Hello")
##print(x.upper())
##print(str("Hello").upper()) 
##print("Hello".upper())

############################################################
# [10-3] 연산자 및 Built-in 함수 Overloading
############################################################

##a = 1 + 2
##b = 'x' + 'y'
##c = 3.4 - 2.5
##
##d = abs(-10)
##e = abs(-3.8)
##f = round(1234, -2)
##g = round(10.434, 1)
##
##print(a,b,c,d,e,f,g, sep='\n')
##
##a = int.__add__(1, 2)
##b = str.__add__('x', 'y')
##c = float.__sub__(3.4, 2.5)
##
##d = int.__abs__(-10)
##e = float.__abs__(-3.8)
##f = int.__round__(1234, -2)
##g = float.__round__(10.434, 1)
##
##print(a,b,c,d,e,f,g, sep='\n')

############################################################
# [11-1] Name binding
############################################################

##a = 2020
##b = 2020
##print(id(2020), id(a), id(b))

############################################################
# [11-2] Name space 추적
############################################################

##a = 10
##print(id(a))
##
##a = a + 1
##b = 10
##print(a, b)
##print(id(a))
##print(id(b))
##
##print(globals())

############################################################
# [11-3] Augmented assignment 
############################################################

##a = 20
##b = 4
##
##print(id(a), a)
##a += 1      
##print(id(a), a)
##a -= b     
##print(id(a), a)
##a *= b + 2  
##print(id(a), a)

############################################################
# [11-4] Name resolution 동작 확인 1
############################################################

##x = max(3,4,5)
##print(x)
##max = 10
##print(max)
##print(max(5,6,7))

############################################################
# [11-5] 파이썬 Keyword 확인
############################################################

##import keyword
##print(keyword.kwlist)

############################################################
# [11-6] Name 오류
############################################################

##x = y
##a += 1
##print(a, x)

############################################################
# [11-7] Namespace의 name 제거
############################################################

##x = max(3,4,5)
##print(x)
##max = 10
##print(max)
##del max
##print(max(5,6,7))
##
##del x
##print(x)
##
##print(min(5,6,7))
##del min

############################################################
# [12-1] 컨테이너의 slot 구조 이해
############################################################

##l = [1,2,3,1]
##
##print(id(1), id(2), id(3), '', sep = '\n')
##print(*map(id, (l, l[0], l[1], l[2], l[3])), sep = '\n')

############################################################
# [12-2] str 컨테이너의 구조
############################################################

##s = 'AB0A'
##
##print(*map(id, 'AB0'), '', sep = '\n')
##print(*map(id, (s, *s)), sep = '\n')

############################################################
# [12-3] 다중 컨테이너의 구조 이해
############################################################

##l = [[1,2,3,1],{1,2},1]
##print(*map(id, (l, *l)), sep = '\n')
##print(*map(len, (l, l[0], l[1])))

############################################################
# [12-4] Mutable 컨테이너의 아이템 변경
############################################################

##l = [(1,2,3,4),{5,6},[7,8,9]]
##
##print(len(l))
##print(*l)
##print(id(l[1]), id(l[2][1]))
##
##l[1] = 10
##l[2][1] = 20
##
##print(*l)
##print(id(l[1]), id(l[2][1]))

############################################################
# [12-5] Mutable 컨테이너의 아이템 추가
############################################################

##l = [(1,2,3,4),{5,6},[7,8,9]]
##
##print(len(l))
##print(*l)
##
##l.insert(1,10)
##l[2].add(20)
##
##print(*l)

############################################################
# [12-6] Container의 Multiple Binding
############################################################

##a = [1,2,3,4]
##b = [1,2,3,4]
##c = a
##print(*map(id, (a,b,c)), sep = '\n')
##print(a == b, a == c, a is b, a is c)
##
##a[0] = 10
##print(a[0], b[0], c[0])    
##print(a == b, a == c, a is b, a is c)
##
##d = (1,2,3,4)
##e = (1,2,3,4)
##f = d
##print(*map(id, (d,e,f)), sep = '\n')
##print(d[0], e[0], f[0], d is e, d is f)

############################################################
# [13-1] 컨테이너의 +, * 연산
############################################################

##s1 = (1,2)
##s2 = (3,4)
##
##print(s1 + s2, s1 * 3)
##print('ab' + 'cd', 3 * 'ab')

############################################################
# [13-2] 다중 컨테이너의 +, * 연산
############################################################

##s1 = [[1,2],[3,4]]
##s2 = [[5,6],[7,8]]
##
##s3 = s1 + s2
##s4 = s1 * 2
##
##s1[0][0] = 9
##
##print(s1, s2, s3, s4, sep = '\n')
##print(*map(id,(*s1,*s2,*s3,*s4)), sep = '\n')

############################################################
# [13-3] 다중 컨테이너의 * 연산에 의한 다중 참조
############################################################

##a = [0] * 3
##b = [[0]] * 3
##c = [[0] * 3] * 3
##
##print(a,b,c, sep = '\n')
##
##a[0] = 2
##b[0][0] = 3
##c[0][0] = 4
##
##print(a,b,c, sep = '\n')

############################################################
# [13-4] Slicing 동작의 이해
############################################################

##a = [0, 1, 2, 3, 4, 5, 6]
##b = a[1:3]
##
##print(a[:], a[2:], a[:5], sep ='\n')
##print(a[1:-2], a[::2], sep ='\n')
##print(a[::-1], a[:3:-2], sep ='\n')
##print(a[3::-1], a[-4:-1], sep ='\n')      
##print(a[:-4:-1], b, b[1:4], sep ='\n')

############################################################
# [13-5] slice 함수와 slice 객체
############################################################

##a = (0,1,2,3,4,5,6,7)
##
##s1 = slice(0,3,1)
##s2 = slice(4,1,-2)
##s3 = slice(None,None,2)
##s4 = slice(None,None,-1)
##
##print(s1,a[s1],a[s2],a[s3],a[s4],sep ='\n')

############################################################
# [13-6] RGB 이미지 분리
############################################################

##image = (0x1D, 0x13, 0x25, 0x13, 0x27, 0x45, 0x08, 0xAB, 0x3F)
##
### 코드 작성
##
##print("0x%x 0x%x 0x%x" % (ar, ag, ab))

############################################################
# [13-7] 컨테이너의 아이템 부분 갱신
############################################################

##l = [1,2,3,4]
##print(l)
##
##l += (5,6,'kim')
##l.extend({7,8})
##print(l)
##
##l[:] = [1,2,3,4]
##print(l)
##
##l[1:3:] = [20,30,40]
##print(l)
##
##l[::2] = ('a','bc','def')
##del l[1:3]
##print(l)
##
##del l[:]
##l.extend('kim')
##l.reverse()
##x = l.copy()
##y = l[::-1]
##print(l, x, y, sep = '\n')
##
##l.clear()
##print(l)

############################################################
# [13-8] list의 copy 메서드와 copy 모듈
############################################################

##import copy
##
##l1 = [[1,2],[3,4]]
##l2 = l1.copy()
##l3 = copy.copy(l1)
##l4 = copy.deepcopy(l1)
##
##l1[0][0] = 10
##
##print(id(l1[0]),l1,sep='\n')
##print(id(l2[0]),l2,sep='\n')
##print(id(l3[0]),l3,sep='\n')
##print(id(l4[0]),l4,sep='\n')

############################################################
# [14-1] 함수의 정의 및 호출
############################################################

##def func1() : print('func1')
##
##def func2() :
##    print('func2')
##
##def func3() :
##    print('func3-1')
##    print('func3-2')
##
##func1()
##
##def func4() :
##    print('func4-1')
##    return
##    print('func4-2')
##
##func2()
##func3()
##func4()

############################################################
# [14-2] 함수의 리턴
############################################################

##print('start')
##
##def func1() :
##    print('func1-1')
##    return
##    print('func1-2')
##    return None
##    print('func1-3')
##
##func1()
##print(func1())
##
##print('stop')

############################################################
# [14-3] 함수의 Parameter
############################################################

##def func1(a) :
##    print('func1', a)
##
##def func2(a, b) :
##    c = a + b
##    print('func2', a, b, c)
##
##func1(10)
##func1('kim')
##
##func2(30, 40)
##func2('kim', 'lew')
##func2([1,2,3], [4,5,6])
##func2('kim', 10)

############################################################
# [14-4] 함수의 값 Return
############################################################

##def func(a) :
##    print(a)
##    return a + 1 
##
##func(10)
##x = func(20)
##print(x)
##print(func(30))

############################################################
# [14-5] return 식이 여럿인 함수
############################################################

##def func(a, b) :
##    return a + b, a - b, a *  b, a // b
##
##print(func(10, 3))

############################################################
# [14-2] argument의 전달
############################################################

##def func(a, b):
##    c = a - b
##    return c
##
##a, b = 10, 4
##
##print( func(10, 4) )
##print( func(a, b) )
##print( func(b, a) )
##print( func(a + 10, b + 20) )
##print( func( func(10, 4), func(a + 10, b + 20) ) )

############################################################
# [14-7] 문자열 복제기
############################################################

##def string_repeat(s, n) :
##
##    # 코드 작성
##
##    return x
##
##y = string_repeat('kim', 2)
##print(y)
##print(string_repeat('hello', 3))

############################################################
# [14-8] 1등과 꼴찌한 학생 번호는?
############################################################

##def score_find(t) :
##
##    # 코드 작성
##
##score = tuple(map(int, input().split()))
##print(score_find(score))

############################################################
# [14-9] 함수의 parameter에 argument의 전달
############################################################

##def f1(a) :
##    a = 100
##    print(a)
##    
##def f2(x) :
##    x[0] = 100
##    print(x)
##
##a = 10
##b = [1,2,3,4]
##
##f1(a)
##f2(b)
##
##print(a, b)

############################################################
# [14-10-1] 함수의 변수 사용 1
############################################################

##cnt = 0
##
##def func() :
##    cnt += 1
##
##func()
##func()
##
##print(cnt)

############################################################
# [14-10-2] 함수의 변수 사용 2
############################################################

##a = 1
##
##def func() :
##    b = a
##    a = 0
##    print(b)
##
##func()
##print(a)

############################################################
# [14-11] global 키워드
############################################################

##def f2( ):
##    global a
##    global b
##    a = 10
##    b = 20
##    c = 30 + d
##    print(a, b, c)
##
##a, c, d = 1, 3, 5
##print(a)
##f2()
##print(a, b, c)

############################################################
# [14-12] nonlocal 키워드
############################################################

##a = 10
##
##def f():
##     a = 20
##     def f1():
##          nonlocal a
##          print(a)
##          a = 30
##          print(a)
##     def f2():
##          nonlocal a
##          print(a)
##          a = 40
##          print(a)
##     f1()
##     f2()
##     print(a)     
##	 
##print(a)
##f()
##print(a)

############################################################
# [14-13-1] nonloacal 특성 이해 1
############################################################

##a = 10
##
##def f():
##    a = 20
##
##    def f1():
##        nonlocal a
##        a = 30
##        print(a)
##
##        def f2():
##            nonlocal a
##            a = 40
##            print(a)
##        f2()
##    f1()
##    print(a)     
##f()
##print(a)

############################################################
# [14-13-2] nonloacal 특성 이해 2
############################################################

##a = 10
##
##def f():
##
##    def f1():
##        nonlocal a
##        a = 30
##        print(a)
##
##    f1()
##    print(a)
##
##f()
##print(a)

############################################################
# [14-14] 전역, 지역 namespace 확인
############################################################

##import pprint as pp
##
##msg = 'happy'
##
##def func(a, b) :
##    c = a + b
##    pp.pprint(locals())
##    return c
##
##pp.pprint(globals())
##print(func(10, 20))

############################################################
# [14-15-1] if 영역의 Local Namespace 해석
############################################################

##a = 1
##b = 2
##c = 3
##
##def f1(x) :
##    b = x
##    c = 4
##    print('[1]', a, b, c)
##    
##    if a != b :
##        c = 5
##        print('[2]', a, b, c)
##        
##    def f2(a) :
##        b = a
##        c = 6
##        print('[3]', a, b, c)
##
##    f2(8)
##    print('[4]', a, b, c)
##
##print('[5]', a, b, c)
##f1(9)
##print('[6]', a, b, c)

############################################################
# [14-15-2] Local Namespace 주의점
############################################################

##a = 1
##b = 2
##c = 3
##
##def f1(x) :
##    b = x
##    y = c
##    print('[1]', a, b, c, y)
##    
##    if a != b :
##        c = 5
##        print('[2]', a, b, c)
##        
##    def f2(a) :
##        b = a
##        c = 6
##        print('[3]', a, b, c)
##
##    f2(8)
##    print('[4]', a, b, c)
##
##f1(9)

############################################################
# [14-16] 함수들간 Namespace 해석
############################################################

##a = 1
##b = 2
##c = 3
##
##def f1() :
##    global b
##    b = 20
##    c = 30
##    print('[1]', a, b, c)
##    
##def f2() :
##    b = 300
##    c = 400
##    print('[2]', a, b, c)
##
##print('[3]', a, b, c)
##f1()
##f2()
##print('[4]', a, b, c)

############################################################
# [14-17] 컨테이너의 unpack argument 전달
############################################################

##def func(a,b):
##    print(a,b)
##
##t = (3,4)
##l = ['abc',400]
##s = {'abc',400}
##d = {'b':10, 'a':20}
##
##print("value ", l)
##print("value ", *l)
##
##func(t)
##func(*t)
##func(*l)
##func(*s)
##func(*d)
##func(**d)

############################################################
# [14-18] format 메서드를 이용한 Formatted String
############################################################

##x = str.format('{} + {} = {}', 3, 4, 7)
##y = '{} + {} = {}'.format(3, 4, 7)
##print(x, y)
##
##print('{0} == {1} ## {2}'.format('kim', 172.5, 30))
##print('{2} == {1} ## {0}'.format('kim', 172.5, 30))
##print('{1} == {1} ## {1}'.format('kim', 172.5, 30))
##print('{name}:{a}:{h}'.format(name = 'kim', h = 172.5, a = 30))
##print('{h}:{a}:{h}'.format(name = 'kim', h = 172.5, a = 30))

############################################################
# [14-19] 컨테이너의 unpack 활용
############################################################

##t = ('Apple', 'Red', 600)
##d =  {'name':'Apple', 'color':'Red', 'price':600}
##
##print('{0} : price is {2}, color is {1}'.format(*t))
##print('{name} : price is {price}, color is {color}'.format(**d))
##print(*d)
##print('{name} : price is {price}, color is {color}'.format(*d))
##print(**d)
##
##d =  {'sep':'*', 'end':'!!!'}
##print(10, 20, 30, **d)

############################################################
# [14-20] Annotation
############################################################

##def my_add(a: int, b: int) -> int: 			
##    return a + b
##
##print(my_add.__annotations__)
##print(my_add(3,4))
##print(my_add('kim','lee'))
##
##    def func(a: '정수 한개', b: 4) -> '정수 리턴': 
##        return a + b
##
##    print(func.__annotations__)
##    print(func(3,4))

############################################################
# [15-1] Position or Keyword Parameter(pPK)
############################################################

##def func(a, b): 			#pPK, pPK
##    print('%d, %d' %(a, b))
##    
##func(10, 20)            		#aP, aP
##func(a = 10, b = 20)    		#aK, aK
##func(b = 10, a = 20)    		#aK, aK
##func(10, b = 20)        		#aP, aK
##func(a = 10, 20)       		#aK, aP
##func(20, a = 10)       		#aP, aK

############################################################
# [15-2] Default pPK Parameter(pPKd) 1
############################################################

##def func(a, b, c = 300, d = 400): 	    #pPK, pPK, pPKd, pPKd
##    print('%d, %d, %d, %d' %(a, b, c, d))
##    
##func(10, 20)                              #aP, aP, (aKd), (aKd)
##func(10, 20, 30)                          #aP, aP, aP, (aKd)
##func(a = 10, b = 20)                      #aK, aK, (aKd), (aKd)
##func(a = 10, b = 20, c = 30, d = 40)      #aK, aK, aK, aK
##func(a = 10, b = 20, d = 40)              #aK, aK, (aKd), aK
##func(10, 20, d = 40)                      #aP, aP, (aKd), aK

############################################################
# [15-3] Default pPK Parameter(pPKd) 2
############################################################

##def func(a, b = 200, c): 		  #pPK, pPKd, pPK
##    print('%d, %d, %d' %(a, b, c))
##
##func(10, 20, 30)         		  #aP, aP, aP

############################################################
# [15-4] Keyword Only Parameter(pK, pKd) 1
############################################################

##def func(*, a, b = 200, c): 	    #pK, pKd, pK
##    print('%d, %d, %d' %(a, b, c))
##    
##func(a = 10, b = 20, c = 30) 	    #aK, aK, aK
##func(c = 30, b = 20, a = 10) 	    #aK, aK, aK
##func(a = 10, c = 30)         	    #aK, aK
##func(10, 20, 30)            	    #ap, ap, ap

############################################################
# [15-5] Keyword Only Parameter(pK, pKd) 2
############################################################

##def func(a, b = 200, *, c, d = 400, e): 	 #pPK, pPKd, pK, pKd, pK
##    print('%d, %d, %d, %d, %d' %(a, b, c, d, e))
##    
##func(10, 20, c = 30, d = 40, e = 50)     	#aP, aP, aK, aK, aK
##func(10, e = 50, c = 30)                	#aP, (aKd), aK, (aKd), aK
##func(e = 50, c = 30, a = 10)            	#aK, (aKd), aK, (aKd), aK

############################################################
# [15-6] pPKd 사용 예
############################################################

##print(round(10.5))
##print(round(number = 10.123, ndigits = 2))
##print(round(ndigits = -2, number = 1234))
##print(round(10.123, 2))

############################################################
# [15-7] pKd 사용 예
############################################################

##print(sorted([3,7,5], reverse = True, key = lambda x : x))
##print(sorted([3,7,5], reverse = False))
##print(sorted([3,7,5], lambda x : x, True))

############################################################
# [15-8] Variable Positon Parameter(*pVP)
############################################################

##def func1(*a):		 #*pVP
##    print(type(a), *a)
##    
##func1(10, 20, "KIM", 3.14)   #aP, aP, aP, aP
##func1()

############################################################
# [15-9] *pVP 사용 예
############################################################

##def getSum(*pVP): return (sum(pVP))
##
##print(getSum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
##print(getSum(10, 20, 30))
##print(getSum())

############################################################
# [15-10] 여러 타입과 함께 사용된 *pVP
############################################################

##def func(a, b = 200, *c, d, e = 500):   #pPK, pPKd, *pVP, pK, pKd
##    print(a, b, d, e)
##    print(*c)
##
##func(10, 20, 30, "KIM", 3.14, d = 40)
##func(10, 20, 30, "KIM", 3.14, 40)       #*pVP이후는 무조건 pK, pKd가 됨
##func(10, 20, d = 40)
##func(10, 30, "KIM", 3.14, d = 40)       #b를 default로, c는 30, "KIM", 3.14를 전달?
##func(10, d = 40)                        #*pVP가 0개이면 pPKd의 default가 사용 가능

############################################################
# [15-11] Variable Keyword Parameter(**pVK) 1
############################################################

##def func(**a):          #**pVK
##    print(type(a), a, sep = '\n')
##
##func(v1 = 1, v2 = 3.14, v3 = "KIM")

############################################################
# [15-12] Variable Keyword Parameter(**pVK) 2
############################################################

##def func(a, b = 200, c = 300, **d):   #pPK, pPKd, pPKd, **pVK
##    print(a, b, c)
##    print(d)
##
##func(10, 20, c = 30, v1 = 1, v2 = 3.14, v3 = "KIM")
##func(10, v1 = 1, v2 = 3.14, v3 = "KIM")
##func(10, v1 = 1, v2 = 3.14, v3 = "KIM", b = 20, c = 30)
##func(10, v1 = 1, b = 20, v2 = 3.14, c = 30, v3 = "KIM")

############################################################
# [15-13] 데이터 추가 함수 설계
############################################################

##def add_item(          ): # parameter 작성
##    # 코드 작성
##
##print(add_item([1,2,3,4], 100))
##print(add_item([1,2,3,4], 200, position = 1))
##
### 아래 코드는 실행 중 오류가 발생해야 한다
### 채점 시스템 제출시 아래 코드는 제거한 후 제출해야 한다
##
###print(add_item([1,2,3,4], 300, 0))

############################################################
# [16-1] 모듈 import
############################################################

##def add(a, b):
##	return 'add?'
##
##import my_module
##print(add(3,4), my_module.add(3,4), my_module.sub(3,4))

##import my_module as mm
##print(mm.add(3,4), mm.sub(3,4))

##import my_module as mm, your_module as ym
##print(mm.add(3,4), mm.sub(3,4))
##print(ym.mul(3,4), ym.div(3,4))

############################################################
# [16-2] 모듈의 특정 이름(name) import
############################################################

##def add(a, b):
##    return 'add?'
##
##from my_module import add
##
##print(add(3,4))
##print(sub(3,4))

##from my_module import add, sub
##print(add(3,4), sub(3,4))

##from my_module import *
##print(add(3,4), sub(3,4))

############################################################
# [16-3] 패키지 import
############################################################

##import my_package.my_module as mm
##print(mm.add(3,4), mm.sub(3,4))
##
##from my_package import my_module as mm
##print(mm.add(3,4), mm.sub(3,4))
##
##from my_package.my_module import add, sub
##print(add(3,4), sub(3,4))
##
##from my_package.my_module import *
##print(add(3,4), sub(3,4))
##
##import sys
##sys.path.append(r'.\my_package\files')
##
##import my_module2 as mm2
##sys.path.pop()
##
##print(mm2.add(3,4), mm2.sub(3,4))

############################################################
# [16-4] import의 주의사항 2
############################################################

##import my_code as mc
##
##print(mc.add2(3,4))
##print(mc.sub2(5,10))

############################################################
# [16-5] import된 모듈의 코드 실행 방지
############################################################

##import my_code_new as mc
##
##print(mc.add2(3,4))
##print(mc.sub2(5,10))

############################################################
# [16-6] import 예시
############################################################

##import pprint as pp
##from sys import getsizeof, getrefcount
##
##pp.pprint(globals())
##print(getsizeof(1234567890))
##print(getrefcount(1))	

############################################################
# [16-7] pandas 모듈을 import 예시
############################################################

##import pandas as pd
##from   pandas  import DataFrame
##
##a = pd.DataFrame()
##b = DataFrame()
##
##print(a, b, sep = '\n')

############################################################
# [16-8] 난수 발생 함수 import 
############################################################

##import random
##
##print(random.randrange(10))
##print(random.randrange(-100,101))
##print(random.randrange(0,101,2))
##print(random.random())
##print(random.sample(range(1,50), 3))
##print(random.sample(range(0,100,2), 3))
##print(random.sample(range(-50,50), 10))
##print(random.sample({1,2,3,4,5,6}, 3))
##print(random.sample({1.2, 3.14, -5.45, 9.2}, 2))

############################################################
# [16-9] 가위, 바위, 보 게임
############################################################

##import random
##
### 코드 작성


############################################################
# [17-1] 조건식과 거짓 조건
############################################################

##def func():
##    return
##
##print( "T" if 0 else "F")
##print( "T" if 0.0 else "F")
##print( "T" if False else "F")
##print( "T" if None else "F")
##print( "T" if () else "F")
##print( "T" if [] else "F")
##print( "T" if {} else "F")
##print( "T" if '' else "F")
##print( "T" if func() else "F")

############################################################
# [17-2] 조건식과 참 조건
############################################################

##print( "T" if -1 else "F")
##print( "T" if '0' else "F")
##print( "T" if (0,) else "F")
##print( "T" if [1] else "F")

############################################################
# [17-3] 짝수, 홀수 판단 함수
############################################################

##def func(a):
##	# 코드 작성
##
##func(10)
##func(11)
##func(-10)
##func(-11)     

############################################################
# [17-4] 비교 연산
############################################################

##a = 10
##b = 10
##print(a == b, a != b, a < b, a > b, a <= b, a >= b)
##
##a = 'kim'
##b = 'kim'
##c = 'kj'
##print(a == b, a != b, a < c, a > c, a <= b, a >= b)
##
##a = [1,2,3]
##b = range(1, 4)
##c = map(int, '1234')
##print(3 in a, 2 not in a, 3 in b, 1 in c)
##
##a = [1,2,3]
##b = a
##b[2] = 30
##print(a is b, a is not b, a[1] is b[1], a[2] is b[2])
	
############################################################
# [17-5] 우리 반 학생인가?
############################################################

##def student_check(t, s) :
##    # 코드 작성
##
##t = ('kim', 'lee', 'park', 'kang', 'song', 'lew', 'moon')
##s = input()
##print(student_check(t, s))

############################################################
# [17-6] 나는 몇 조인가?
############################################################




############################################################
# [17-7] 논리 연산자
############################################################

##print(True and False)
##print(True or False)
##print({} and True)
##print(False or 100)
##print((11 % 2) and (20 % 3))
##print(not (10 % 2))

############################################################
# [17-8] 3의 배수 또는 7의 배수 판단
############################################################





############################################################
# [17-9] 학점을 알려주세요
############################################################

##def func(n):
##
##    # 코드 작성
##
##n = int(input())
##
###코드 작성

############################################################
# [17-10] 학점 계산 프로그램 개선
############################################################

##def func(n):
##
##    # 코드 작성
##
##n = int(input())
##
###코드 작성

############################################################
# [17-11] Short circuit 원리
############################################################

##def fTrue():
##    print('fTrue')
##    return True
##
##def fFalse():
##    print('fFalse')
##    return False
##
##print(fTrue() and fFalse())
##print(fFalse() or fTrue())
##
##print(fFalse() and fTrue())
##print(fTrue() or fFalse())

############################################################
# [17-12] 연산자 우선순위 정리
############################################################

##a, b = 10, 5
##print(a == not b)
##print(not(a % 3 and a % 5))
##print(a % 3 == 0 or a % 5 != 1)
##print('even') if a % 2 == 0 else print('odd')

############################################################
# [17-13] all 함수와 any 함수 1
############################################################

##print(all([True, 1, -1, 1.0, 'str']), all(([],)), all([]))
##print(all({True, None, -1, 1.0, 'str'}), any([()]), any([]))
##print(any([True, None, 0, 0.0, '']))
##print(any((False, None, 0, 0.0, '')))

############################################################
# [17-14] all 함수와 any 함수 2
############################################################

##x = map(int, '1901023')
##print(all(x))
##print(any(x))
##print(*x)

############################################################
# [18-1-1] 사용자 함수
############################################################

##a = 10
##
##def f1() : print(1)
##def f2() : print(a + 1)
##def f3(x, y) : print(max(x, y))
##def f4(x, y) : return x + y
##
##f1()
##f2()
##f3(5, 10)
##print(f4(5, 10))

############################################################
# [18-1-2] Lambda 식으로 이름없는 함수 만들기
############################################################

##a = 10
##l1 = lambda : print(1)
##l2 = 
##l3 = 
##l4 = 
##
##l1()
##l2()
##l3(5, 10)
##print(l4(5, 10))

############################################################
# [18-2] Lambda 함수 동작 분석
############################################################

##def sqr(x) :
##    return x ** 2
##
##y = map(sqr, [1,3,4,7])
##print(*y)
##
##z = map(lambda x : x ** 2, [1,3,4,7])
##print(*z)

############################################################
# [18-3] tuple로 리턴되는 함수를 lambda 식으로 설계
############################################################

##def func(a, b) : return a+b, a-b, a*b, a/b
##
##print( func(3,4) )
##
##f1 = lambda a, b : (a+b, a-b, a*b, a/b)
##f2 = lambda a, b : [a+b, a-b, a*b, a/b]
##print( f1(3, 4) )
##print( f2(3, 4) )

############################################################
# [18-4] Lambda 식으로 함수 재설계
############################################################

##n = int(input())
##
##f = # 코드 설계
##
##print(f(n))

############################################################
# [18-5] Lambda 함수와 Call-Back
############################################################

##def add(a, b) : return a + b
##def sub(a, b) : return a + b
##def mul(a, b) : return a - b
##def div(a, b) : return a / b
##
##def func(f, x, y) : return f(x, y)
##
##print(func(add, 10, 3))
##print(func(sub, 10, 3))
##print(func(mul, 10, 3))
##print(func(div, 10, 3))
##
##print(func(lambda a, b : a + b, 10, 3))
##print(func(lambda a, b : a - b, 10, 3))
##print(func(lambda a, b : a * b, 10, 3))
##print(func(lambda a, b : a / b, 10, 3))

############################################################
# [18-6] 다중 container의 대소 비교
############################################################

##t = (('banana', 500, 'yellow'), ('apple', 600, 'red'), ('kiwi', 500, 'brown'))
##
##min_item = min(t)
##print('min =', min_item)

############################################################
# [18-7] min, max 함수의 비교 대상 지정
############################################################

##def comp1(x) : return x[0]
##def comp2(x) : return x[1]
##def comp3(x) : return x[1], x[2]
##    
##t = (('banana', 500, 'yellow'), ('apple', 600, 'red'), ('kiwi', 500, 'brown'))
##
##print( min(t, key = comp1), max(t, key = comp1) )
##print( min(t, key = comp2), max(t, key = comp2) )
##print( min(t, key = comp3), max(t, key = comp3) )

############################################################
# [18-8] key로 전달하는 함수를 lambda로 구현
############################################################

#### def comp1(x) : return x[0]
#### def comp2(x) : return x[1]
#### def comp3(x) : return x[1], x[2]
##    
##t = (('banana', 500, 'yellow'), ('apple', 600, 'red'), ('kiwi', 500, 'brown'))
##
##print( min(t, key =                              ) ) # key = comp1 기능 
##print( min(t, key =                              ) ) # key = comp2 기능
##print( min(t, key =                              ) ) # key = comp3 기능

############################################################
# [18-9] dict에서 최대, 최소값 찾기
############################################################

##d = {'apple':1500, 'orange':500, 'banana':100, 'kiwi':700}
##
##min_item = min(d.items())
##max_item = max(d.items())
##
##print('min =', min_item, 'max =', max_item)

############################################################
# [18-10] dict에서 가격을 기준으로 최대, 최소값 찾기
############################################################

##d = {'apple':1500, 'orange':500, 'banana':100, 'kiwi':700}
##
### 코드 작성
##
##print('min =', min_item, 'max =', max_item)

############################################################
# [18-11] sorted 함수의 정렬 기준 전달
############################################################

##x = [('apple','red',500),('kiwi','brown',300),('banana','yellow',300)]
##
##y1 = sorted(x, key = (lambda a : a[0]), reverse = True)
##y2 = sorted(x, key = (lambda a : a[1]))
##y3 = sorted(x, key = (lambda a : a[2]))
##y4 = sorted(x, key = (lambda a : (a[2], a[0])))
##
##print(x, y1, y2, y3, y4, sep = '\n')

############################################################
# [18-12] dict의 sorted 함수 적용을 위한 key 설정
############################################################

##l = [{'name':'kim', 'id':4}, {'name':'song', 'id':2}, {'name':'lee', 'id':1}, {'name':'yun', 'id':3}]
##
##y0 = sorted(l)
##
##y1 = sorted(l, key = (lambda a: a['name']) )
##y2 = sorted(l, key = (lambda a: a['id']))
##
##print(l, y1, y2, sep = '\n')

############################################################
# [18-13] filter 함수 이해
############################################################

##def func1(a) : return True
##def func2(a) : return False
##def func3(a) : return not (a % 3)  
##
##x = (1,2,3,6,8,9,10,24,19,21,30,41,50,90)
##f1 = filter(func1, x)
##f2 = filter(func2, x)
##y = tuple(filter(func3, x))
##z = tuple(filter(None, [1,0,None,{},'0',(),[],[0],'',-1]))
##
##print(type(f1))
##print(*f1)
##print(*f2)
##print(y)
##print(z)

############################################################
# [18-14] filter 함수 활용 연습 => lambda로 변경
############################################################

##x = (1,2,3,6,8,9,10,24,19,21,30,41,50,90)
##
##y = # 코드 작성
##
##print(y)

############################################################
# [18-15] 길이가 3 이상인 문자열들만 선별하기
############################################################

##x = # 코드 작성
##
##print(*x)

############################################################
# [18-16] 모든 실수 값들을 정수화(round)후 제곱하기
############################################################




############################################################
# [18-17] ‘a’로 시작하는 단어의 앞 글자를 ‘*’로 변환하기
############################################################




############################################################
# [18-18] 24bpp RGB 이미지 추출 함수 개선 
############################################################

##image = (0x1D, 0x13, 0x25, 0x13, 0x27, 0x45, 0x08, 0xAB, 0x3F)
##
##r, g, b = image[0::3], image[1::3], image[2::3]
##ar, ag, ab = map(round, (sum(r)/len(r), sum(g)/len(g), sum(b)/len(b)))
##
##print("0x%x 0x%x 0x%x" % (ar, ag, ab))

### 이 코드를 map과 lambda expression으로 개선해 보자
##
##image = (0x1D, 0x13, 0x25, 0x13, 0x27, 0x45, 0x08, 0xAB, 0x3F)
##
### 코드 작성
##
##print("0x%x 0x%x 0x%x" % (ar, ag, ab))

############################################################
# [19-1] Generator Expression
############################################################

##a = (x for x in range(10))
##print(type(a))
##print(*a)
##
##b = (x * x for x in range(10))
##print(*b)
##
##c = (str(y) for y in range(1,10,2))
##print(*c)
##
##d = (print(y * y) for y in range(1, 3))
##print(*d)

############################################################
# [19-2] Generator 식에 filter 기능 추가
############################################################

##a = (x * x for x in range(10) if (x % 3))
##print(*a)
##
##b = (x * x for x in range(10) if (x % 3) and (x % 5))
##print(*b)
##
##c = (x * x for x in range(10) if (x % 3) if (x % 5))
##print(*c)

############################################################
# [19-3-1] 모든 값을 제곱하여 list에 저장하기 => lambda와 map 활용
############################################################

##t = (1, 3, 7, 2, 6, 8)
##
##l = # 코드 작성
##
##print(l)

############################################################
# [19-3-2] 모든 값을 제곱하여 list에 저장하기 => generator expression 활용
############################################################

##t = (1, 3, 7, 2, 6, 8)
##
##l = # 코드 작성
##
##print(l)

############################################################
# [19-4] ‘a’로 시작하는 단어의 앞 글자를 ‘*’로 변환하기 => generator 이용
############################################################

##y = # 코드 작성
##
##print(*y)

############################################################
# [19-5] 2개의 생성식이 사용된 Generator
############################################################

##s1, s2 = 'abc', '1234'
##
##r = (x + y for x in s1 for y in s2)
##
##print(*r)

############################################################
# [19-6] 2차원 튜플을 1차원으로 변환
############################################################

##m = ((11,2,33,4),(5,6),(90,10,11,12))
##r = tuple(y for x in m for y in x)
##
##print(r)
##print(min(r), max(r), sum(r))

############################################################
# [19-7] 구구단 인쇄
############################################################

###m = ([x, y, x * y] for x in range(1, 10) for y in range(1, 10))
##
##m = ((x, y, x * y) for x in range(1, 10) for y in range(1, 10))
##
##r = ('{} * {} = {}'.format(*x) for x in m)
##
##print(*r, sep = '\n')

############################################################
# [19-8] 구구단 인쇄 개선
############################################################

##r = ('{} * {} = {}'.format(x,y,x*y) for x in range(1,10) for y in range(1,10))
##print(*r, sep = '\n')

############################################################
# [19-9] Filter가 사용된 다수의 생성식 사용 구조
############################################################

##m = ( (1,2,3,4), (4,), (6,7), (9,8,0), (10, 11, 12) )
##r = ( (y, x) for y in range(0, len(m)) if len(m[y])>2 for x in m[y] if not(x%2) )
##
##print(*r)

############################################################
# [19-10] Comprehension Expression
############################################################

##l1 = [x for x in range(5)]
##print(type(l1), l1)
##
##l2 = [(x for x in range(5))]
##print(type(l2), l2)
##
##s = {x * x for x in range(5)}
##print(type(s), s)
##
##t = (('a', 90), ('b', 80), ('c', 95))
##d = { k : v for k, v in t if v > 85 }
##print(type(d), d)

############################################################
# [19-11-1] 귤 판매 => lambda와 filter 함수 활용
############################################################

##n = int(input())
##
### 여기서 n은 이후 사용되지 않음
### 두 번째줄의 값 들만 입력 받아서 사용하면 됨
##
### 코드 작성

############################################################
# [19-11-2] 귤 판매 => list comprehension 활용
############################################################

##n = int(input())
##
### 여기서 n은 이후 사용되지 않음
### 두 번째줄의 값 들만 입력 받아서 사용하면 됨
##
### 코드 작성

############################################################
# [19-12] 선별된 귤을 모두 2배하기
############################################################

##n = int(input())
##
### 여기서 n은 이후 사용되지 않음
### 두 번째줄의 값 들만 입력 받아서 사용하면 됨
##
### 코드 작성

############################################################
# [19-13] * 연산을 이용한 다차원 List 생성
############################################################

##x = [ [] ] * 4
##print(x)
##x[0].extend((1,2))
##print(x)

##y = [ [0] * 3 ] * 4
##print(y)
##y[0][0] = 1
##print(y)

############################################################
# [19-14] Comprehension을 이용한 다차원 List 생성
############################################################

##x = [ [] for i in range(4) ]
##print(x)
##x[0].extend((1,2))
##print(x)

##y = [ [0 for j in range(3) ] for i in range(4) ]
##print(y)
##y[0][0] = 1
##print(y)

############################################################
# [19-15-1] 1차원 list를 2차원 list로 만들기
############################################################

##a = [1,2,3,4,5,6,7,8,9,10,11,12]
##b = [[a[m] for m in range(n*4, n*4+4)] for n in range(3)]
##
##print(b)

############################################################
# [19-15-2] 1차원 list를 2차원 list로 만들기 => slicing
############################################################

##a = [1,2,3,4,5,6,7,8,9,10,11,12]
##b = [a[i:i+4] for i in range(0,len(a),4)]
##
##print(b)

############################################################
# [19-16] zip을 이용한 배열 Transpose
############################################################

##a = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
##b = list(map(list, zip(*a)))
##
##print(type(b), b)

############################################################
# [19-17] Comprehension을 이용한 배열 Transpose
############################################################
 
##a = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
##
##b = # 코드 작성
##
##print(type(b), b)

############################################################
# [19-18] 행과 열의 큰 값 찾기
############################################################

### N은 배열 크기를 받는 변수이며 코드에 사용할 필요는 없음
### d에 저장되는 데이터 분석후 d를 이용하여 코드를 설계한다
##
##N = int(input())
##d = [[int(x) for x in input().split()] for i in range(N) ]
##
### 코드 작성

############################################################
# [19-19] 방식별 속도 비교
############################################################

##import datetime
##
##def f1(x) : return x * x
##def f2(x) : return not x % 2
##
##s = datetime.datetime.now()
##a = filter(f2, range(10000000))
##b = print(sum(map(f1, a)))
##e = datetime.datetime.now()
##print(e - s)
##
##s = datetime.datetime.now()
##print(sum(map(f1, filter(f2, range(10000000)))))
##e = datetime.datetime.now()
##print(e - s)
##
##s = datetime.datetime.now()
##print(sum(map(lambda x : x * x, filter(lambda x : not x % 2, range(10000000)))))
##e = datetime.datetime.now()
##print(e - s)
##
##s = datetime.datetime.now()
##print(sum([x * x for x in range(10000000) if not x  % 2]))
##e = datetime.datetime.now()
##print(e - s)
##
##s = datetime.datetime.now()
##print(sum((x * x for x in range(10000000) if not x  % 2)))
##e = datetime.datetime.now()
##print(e - s)

############################################################
# [20-1] Iterable 타입의 아이템들 인쇄
############################################################

##t = (1,2,3,4)
##print('[1]', *t)
##print('[2]', *t)
##
##r = range(0,10)
##print('[3]', *r)
##print('[4]', *r)
##
##g = (x for x in range(0,10))
##print('[5]', *g)
##print('[6]', *g)
##
##m = map(int, '1234')
##print('[7]', *m)
##print('[8]', *m)
##
##z = zip('abcd', (1,2,3,4))
##print('[9]', *z)
##print('[10]', *z)
##
##f = filter(lambda x : not(x % 2), range(0,10))
##print('[11]', *f)
##print('[12]', *f)
##
##t = tuple((x for x in range(1,5)))
##l = list(map(int, '12'))
##s = set(filter(lambda x : True, (1,2,3)))
##d = dict(zip('abc',(4,5,6)))
##
##print(t, l, s, d, sep = '\n')

############################################################
# [20-2] Iterator의 개념
############################################################

##x = map(int, [3.14, -5.25, -128])
##y = map(abs, x)
##
##print('[1]', *x)
##print('[2]', *y)

############################################################
# [20-3] Iterator의 분석
############################################################

##g = (x for x in range(1,5))
##print('[1]', g[0])
##print('[2]', next(g))
##print('[3]', next(g))
##print('[4]', *g)
##
##m = map(int, '12')
##print('[5]', m[0])
##print('[6]', next(m))
##print('[7]', next(m))
##print('[8]', next(m))
##print('[9]', next(m, 'Empty'))
##
##t = (1,2)
##print('[10]', t[0])
##print('[11]', next(t))
##
##r = range(1,3)
##print('[12]', r[0])
##print('[13]', next(r))

############################################################
# [20-4] Generator 함수 분석
############################################################

##def mygen():
##    yield 1
##    yield 2
##    yield 3
##
##x = mygen()
##
##print(next(x))
##print(next(x))
##print(next(x))
##print(next(x))

############################################################
# [20-5] Generator 함수의 이해
############################################################

##def func(a, b):
##    for i in range(a, b + 1):
##        yield i
##
##x = func(1, 3)
##y = func(4, 5)
##
##print(next(x))
##print(next(x))
##print(next(x))
##print(next(x))
##
##print(next(y))
##print(next(y))
##print(next(y))

############################################################
# [20-6] Iteratable을 Iterator로 변환
############################################################

##x1 = iter(range(1,5))
##x2 = iter([1,2,3,4])
##x3 = iter({'a':1, 'b':2}.items())
##x4 = iter(map(int, '123'))
##
##print(type(x1), next(x1), *x1)
##print(type(x2), next(x2), *x2)
##print(type(x3), next(x3), *x3)
##print(type(x4), next(x4), *x4)

############################################################
# [20-7] 일반 함수의 Iterator 타입 함수화
############################################################

##def func() :
##    global cnt
##    cnt += 1
##    print(cnt)
##    x = (0,1,2,3,4)
##    return x[cnt]
##
##cnt = -1
##y = iter(func, 3)
##print(type(y), next(y), *y)
##print(next(y))

############################################################
# [21-1] if 문
############################################################

##a, b = 10, 20
##
##if a: print('[1]')
##
##print('[2]')
##
##if a != b:
##    print('[3]')
##    
##print('[4]')
##
##if a > b:
##    print('[5]')
##    print('[6]')
##    
##print('[7]')

############################################################
# [21-2] else 문
############################################################

##a, b = 10, 20
##
##if a > b: print('[1]')
##else: print('[2]')
##
##print('[3]')
	
############################################################
# [21-3-1] 여러개의 if 사용
############################################################

##a, b = 10, 20
##
##if a > b: print('[1]')
##if a < b : print('[2]')
##if a != b : print('[3]')

############################################################
# [21-3-2] elif 여러개의 사용
############################################################

##a, b = 10, 20
##
##if a > b: print('[1]')
##elif a < b : print('[2]')
##elif a != b : print('[3]')
##else: print('[4]')

############################################################
# [21-4-1] 비워둔 들여쓰기
############################################################

##if True :
##    print('[1]')
##else:
##
##print('[2]')

############################################################
# [21-4-2] 비워둔 들여쓰기
############################################################

##def func():
##
##print("[1]")
##print(func())

############################################################
# [21-5-1] pass문 사용
############################################################

##if True :
##    print('[1]')
##else:
##    pass
##
##print('[2]')

############################################################
# [21-5-2] pass문 사용
############################################################

##def func():
##    pass
##
##print("[1]")
##print(func())

############################################################
# [21-6] 2,3,5 배수 확인 함수
############################################################

##def compare(num):
##    #코드 작성
##
##print('3 =>', compare(3))
##print('62 =>', compare(62))
##print('25 =>', compare(25))
##print('157 =>', compare(157))

############################################################
# [21-7] 학점을 알려주세요 => if문으로 설계
############################################################

##def func(n) :
##    #코드 작성
##
##print(func(int(input())))

############################################################
# [21-8] 주차요금
############################################################

##time = int(input())
##
###코드 작성
##
##print(fee)

############################################################
# [22-1] for 문의 구성
############################################################	
	
##for i in range(10) :
##    print(i)
##
##print('end')

##t = ("kim", "lee", "park", "lew")
##for i in range(len(t)) : print(t[i])
##for x in t : print(x)

##l = [(1,2), (3,4), (5,6), (7,8)]
##
##for x in l :
##    print(x)

############################################################
# [22-2] Target List Unpack
############################################################

##t1 = ((1,2),'AB', ['hello', 100], (3.14, 'pi'))
##t2 = ([1,2,3,4],('kim','lee','park'),(-1, -2))
##
##for a, b in t1 :
##    print(a, b)
##
##for a, b, *c in t2 :
##    print(a, b, c)
##
##for a, *b, c in t2 :
##    print(a, b, c)
##
##for i, x in enumerate('ABCD') :
##    print(i, x)

############################################################
# [22-3] sum 함수 구현
############################################################

##def my_sum(y) :
##    #코드 작성
##
##x = map(int, input().split())
##print(my_sum(x))

############################################################
# [22-4] 이름 위치 모두 찾기
############################################################

##t = ('kim','lee','park','kim','song','lee')
##
### 코드 작성
	
############################################################
# [22-5] 귤 판매 시즌2
############################################################

### [1] filter와 lambda 활용
##
##n = int(input())
##box = list(filter(lambda x: x>=10, map(int, input().split())))
##
##print(len(box))
##print(*box) 

### [2] list comprehension 활용
##
##n = int(input())
##
##l = [x for x in map(int, input().split()) if x >= 10]
##
##print(len(l))
##print(*l)

### [3] 이 코드를 for문으로 재설계하라
##
##n = int(input())
##x = map(int, input().split())
##box = []
##
### 코드 작성
##
##print(len(box))
##print(*box) 

############################################################
# [22-6] 이중 for 루프
############################################################

##for i in range(5) :
##    for j in range(5) :
##        print('*', end = '')
##    print()

############################################################
# [22-7-1] 별 찍기 1
############################################################

#코드 작성

############################################################
# [22-7-2] 별 찍기 2
############################################################

#코드 작성

############################################################
# [22-7-3] 별 찍기 3
############################################################

#코드 작성

############################################################
# [22-7-4] 별 찍기 4
############################################################

#코드 작성

############################################################
# [22-7-5] 별 찍기 5
############################################################

#코드 작성

############################################################
# [22-8-1] 이차원 튜플의 아이템 인쇄 1
############################################################

### 인덱스 번호를 이용하는 방식
##
##t = ((1,2),(3,4,5),(6,7,8,9))
##
##for i in range(len(t)) :
##    for j in range(len(t[i])) :
##        print(t[i][j], end = ' ')

############################################################
# [22-8-2] 이차원 튜플의 아이템 인쇄 2
############################################################

### iterator 속성을 이용하는 방식
##
##t = ((1,2,3,4),(5,6,7,8),(9,10,11,12))
###t = ((1,2),(3,4,5),(6,7,8,9))
##
##for y in t :
##    for x in y :
##        print(x, end = ' ')

############################################################
# [22-9] 행과 열을 바꿔서 이차원 튜플의 아이템 인쇄
############################################################
		
##t = ((1,2,3,4),(5,6,7,8),(9,10,11,12))
##
### 코드 작성

	
############################################################
# [22-10] 배열 Transpose
############################################################
	
##a = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
##b1 = list(map(list, zip(*a)))
##b2 = [[y[i] for y in a] for i in range(len(a[0]))]
##
##print(type(b1), b1)
##print(type(b2), b2)	

############################################################
# [22-11] 이중 for 루프를 이용한 배열 Transpose
############################################################

##a = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
##l = [[],[],[],[]] # l = [[] for i in range(len(a[0]))]
##
### 코드 작성


############################################################
# [22-12] break, continue의 동작
############################################################

##for i in range(10) :
##    if i > 7 : break
##    if not i % 3 : continue
##    print(i)
##print('end => ', i)

############################################################
# [22-13] 알밤만 담는 바구니
############################################################

##m, n = map(int, input().split())
##l = []
##
### 코드 작성


############################################################
# [22-14] 알밤을 분류하여 담는 바구니
############################################################

##l1 = []
##l2 = []
##
##m, n = map(int, input().split())
##
### 코드 작성


		
############################################################
# [22-15] 소수 판별 함수의 동작
############################################################

##def prime(n):
##    for i in range(2, n):
##        if not n%i:
##            print('no prime', n)
##            break
##    else : print('prime', n)    
##
##prime(2)
##prime(7)
##prime(15)	

############################################################
# [22-16-1] for 문 안의 변수 유의사항
############################################################

##i = 2000
##print('[1]', i)
##
##for i in [1,2]:
##    print('  [2]', i)
##    i = 200
##    print('  [3]', i)
##print('[4]', i)

############################################################
# [22-16-2] for 문 안의 변수 유의사항
############################################################

##i = 200
##print('[1]', i)
##
##for i in [1,2,3]:
##    i += 20
##    print('  [2]', i)
##print('[3]', i)

############################################################
# [22-17] while 문의 구성
############################################################

### [1]
##
##a = 0
##
##while a < 5 :
##    print('[1]', a)
##    a += 1
##print('[2]', a)

### [2]
##
##a = 0
##
##while a < 5 :
##    if a > 4 :
##        break
##    print('[1]', a)
##    a += 1
##else :
##    print('[2]', a)
##print('[3]', a)

############################################################
# [22-18] while에 의한 무한 루프
############################################################

##i = 0
##
##while True :
##    print(i)
##    i += 1
##print('EXIT')

############################################################
# [22-19] 조건에 맞는 입력이 들어올 때 까지 입력 받기
############################################################

# 코드 작성


############################################################
# [23-1] list Method 이해
############################################################

##l = [1]
##print(l)
##
##l.append(4)
##l.append(2)
##l.insert(1, 5)
##l.extend((3, 10, 9))
##print(l)
##
##x = l.pop()
##y = l.pop(3)
##l.remove(3)
##print(x, y, l)
##
##l.reverse()
##print(l)
##l.sort()
##print(l)
##l.sort(reverse = True)
##print(l)

############################################################
# [23-2] Sequence type과 reversed 함수
############################################################
	
##s1 = 'Hello'
##t1 = (1,2,3,4)
##l1 = [10, 20, 30, 40]
##r1 = range(100, 105)
##
##s2 = reversed(s1)
##t2 = reversed(t1)
##l2 = reversed(l1)
##r2 = reversed(r1)
##
##print(s1, type(s2), ''.join(s2))
##print(t1, *t2)
##print(l1, *l2)
##print(*r1, *r2)
	
############################################################
# [23-3] 전학생 자리 배치
############################################################
  
##a = [1,4,7,10]
##
##while True:
##    m = int(input())
##
##    # 코드 작성
##        
##    print(a)

############################################################
# [23-4] 유한 크기 queue의 구현
############################################################

##Q = []
##
##def queue(n) :
##    #코드 작성
##    
##def dequeue() :
##    #코드 작성
##    
##print(queue(10), Q)
##print(queue(20), Q)
##print(queue(30), Q)
##print(dequeue(), Q)
##print(queue(40), Q)
##print(queue(50), Q)
##print(queue(60), Q)
##print(dequeue(), Q)
##print(dequeue(), Q)
##print(dequeue(), Q)
##print(queue(70), Q)
##print(dequeue(), Q)
##print(dequeue(), Q)
##print(dequeue(), Q)

############################################################
# [23-5] 유한 크기 stack의 구현
############################################################

##STK = []
##
##def push(n) :
##    #코드 작성
##    
##def pop() :
##    #코드 작성
##    
##print(push(10), STK)
##print(push(20), STK)
##print(push(30), STK)
##print(pop(), STK)
##print(push(40), STK)
##print(push(50), STK)
##print(push(60), STK)
##print(pop(), STK)
##print(pop(), STK)
##print(pop(), STK)
##print(push(70), STK)
##print(pop(), STK)
##print(pop(), STK)
##print(pop(), STK)
	
############################################################
# [24-1] str 메서드 활용 연습 1
############################################################

##s1 = 'Hello!'
##print(s1.upper())
##print(s1.lower())
##print(s1.replace('l', 'XX'))
##print(s1.replace('l', 'X', 1))
##print(s1.split(sep = 'e'))
##print(s1.split('l'))
##
##s2 = '010-1234-5678'
##print(s2.split('-'))
##print(s2.split('-', maxsplit = 1))
##print(s2.rsplit('-', maxsplit = 1))
##
##s3 = ' Hi Low '      # 공백 하나씩
##print(s3.split())
##print(s3.split(' '))
##
##s4 = '  Hi  Low  '   # 공백 두개씩
##print(s4.split())
##print(s4.split(' ')) # 공백 하나

############################################################
# [24-2] splitlines 기능
############################################################

##print('ABC\n'.split('\n'))
##print('ABC\n'.splitlines())
##print('AB\n\rCD E\n\nFG\r\rAB\r\n\r'.splitlines())
##print('AB\n\rCD E\n\nFG\r\rAB\r\n\r'.splitlines(keepends=True))

############################################################
# [24-3] join 기능
############################################################

##s1 = ['010', '1234', '5678']
##print(str.join('',s1))
##print(' '.join(s1))
##print('-'.join(s1))
##print(':::'.join(s1))

############################################################
# [24-4] 파일의 문장수와 문장별 단어수 인쇄
############################################################

##import sys
##
##f = open('test.txt', 'r', encoding='utf8')
##d = f.read()
##f.close()
##
### 코드 작성

############################################################
# [24-5-1] 문자열 연결하여 인쇄하기 1
############################################################

##import datetime
##
##l = [str(x) for x in range(100)]
##
##start = datetime.datetime.now()
##
##print(*l, sep = '-')
##
##end = datetime.datetime.now()
##print(end - start)

############################################################
# [24-5-2] 문자열 연결하여 인쇄하기 2
############################################################

##import datetime
##
##l = [str(x) for x in range(100)]
##
##start = datetime.datetime.now()
##
### 코드 작성
##
##end = datetime.datetime.now()
##print(end - start)

############################################################
# [24-6] str 메서드 활용 연습 3
############################################################

##s1 ='    Nice to meet you!  '
##s2 ='aabbcaxb?bxacbbaa'
##
##print(s1.strip())
##print(s1.rstrip())
##print(s1.lstrip())
##print(s2.strip('axb?'))
##print(s2.rstrip('axb?'))
##print(s2.lstrip('axb?'))
##print('Hello python'.swapcase())
##print('hello pyTHON'.title())
##print('hello pyTHON'.capitalize())
##print('Hello'.center(20))
##print('Hello'.center(20, '-'))
##print('Hello'.ljust(20, '-'))
##print('Hello'.rjust(20, '-'))
##print('3250'.zfill(20))
##print('A\tB'.expandtabs())
##print('A\tB'.expandtabs(4))
##print('010-1234-5678'.partition('-'))
##print('010-1234-5678'.rpartition('-'))
##print('010-1234-5678'.partition('*'))

############################################################
# [24-7] str 메서드 활용 연습 4
############################################################

##s2 ='aabbcaxb?bxacbbaa'
##
##print(s2.find('bb'), s2.find('bb', 3, -1), s2.rfind('bb'))
##print(s2.index('bb'), s2.index('bb', 3, -1), s2.rindex('bb'))
##
##print(s2.startswith('aab'), s2.startswith('abb'))
##print(s2.endswith('baa'), s2.endswith('bba'))
##print(s2.count('bb'), s2.count('bb', 3, -1))
##
##print('A B5CD!'.isupper(), 'A b5cD!'.islower())
##print('AbC'.isalpha(), 'AbC1'.isalpha())
##print('aA123'.isalnum(), 'a#123'.isalnum())
##print('12'.isdecimal(), '12'.isdigit(), '12'.isnumeric())
##print('3²'.isdecimal(), '3²'.isdigit(), '3²'.isnumeric())
##print( '½'.isdecimal(),  '½'.isdigit(),  '½'.isnumeric())
##print('\x41'.isprintable(), '\t'.isprintable())
##print('Hi Low'.istitle(), '\t '.isspace(), '½'.isascii())
##print('_s1'.isidentifier(), '1x'.isidentifier())

############################################################
# [24-8] 문자열 전처리 및 한 문장으로 만들기
############################################################

##s = ('   Willtek   python     ', 'Good  \t Morning~', '   Have a good day!!   ')
##
### 코드 작성
##
##print(r)

############################################################
# [24-9] 문자까지의 문자열
############################################################
	
##lower = 'abcdefghijklmnopqrstuvwxyz'
##upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
##
##N = input()
##
### 코드 작성

############################################################
# [25-1] set 연산자 및 메서드 동작 이해 1
############################################################

##s1 = {1, 2, 7}
##s2 = {1, 2, 4, 5}
##s3 = {2, 4, 5, 6}
##l = [1,2,4,5]
##
##print(s1 | set(l),  s1.union(l))
##print(s1 | s2 | s3, s1.union(s2, s3))
##print(s1 & s2 & s3, s1.intersection(s2, s3))
##print(s1 - s2 - s3, s1.difference(s2, s3))
##print(s1 ^ s2,      s1.symmetric_difference(s2))
##
##print(s1.isdisjoint([10,20,30]), s1.isdisjoint(s2))
##print(s1.issubset({1,2,4,7}),    s1.issubset(s1),   s1 <= s1, s1 < {1,2,4,7})
##print(s1.issuperset({1,2}),      s1.issuperset(s1), s1 >= s1, s1 > {1,2})

############################################################
# [25-2] set 연산자 및 메서드 동작 이해 2
############################################################

##s1 = {1, 2, 4, 5}
##s2 = {2, 4, 5, 6}
##
##s3 = {1, 2, 7}
##s3 |= s1 | s2
##
##s4 = {1, 2, 7}
##s4 &= s1 | s2
##
##s5 = {1, 2, 7}
##s5 ^= s1
##print(s3, s4, s5, sep ='\n')
##
##s = {1, 2, 7}
##s.add(1)
##s.add((1, 2))
##print(s)
##
##s.discard(4)
##print(s)
##
##try :
##     s.remove(4)
##except KeyError:
##     print("Remove - KeyError")
##try :
##     print(val)
##except NameError:
##     val = 10
##     print("val - NameError")
##
##print(val)
##
##x = s.pop()
##print(x, s)
##
##s.clear()
##print(s)

############################################################
# [25-3] 빵을 두 군데서 받은 학생은 모두 몇 명?
############################################################

##x = ('kim', 'lee', 'park', 'song' , 'moon', 'lew')
##y = ('min', 'park', 'kong', 'mo', 'lew')
##
### 코드 작성
##
##print( num )

############################################################
# [25-4] 없어진 학생은?
############################################################

##K = int(input())
##
##for x in range(K):
##    N, M = map(int, input().split())
##    r = map(int, input().split())
##     
##    # 코드 작성
   
############################################################
# [26-1] dict 메서드 이해 1
############################################################

##d = {'a': 1, 'b' : 2}
##d['a'] = 10
##d['c'] = 30
##print(d)
##
##d.setdefault('a', 100)
##d.setdefault('d', 400)
##print(d)
##
##print(d.get('b', 200))
##print(d.get('e', 500))
##print(d)
##
##d1 = d.copy()
##del d['c']
##print(d1.pop('b', 'NONE'))
##print(d1.pop('x', 'NONE'))
##print(d1.popitem())
##print(d1)
##
##d1.clear()
##print(d1)

############################################################
# [26-2] dict 메서드 이해 2
############################################################

##d = {'a' : 1, 'b' : 2}
##
##d.update({'c' : 3, 'd' : 4})
##d.update([('e', 5)])
##d.update({('f', 6)})
##d.update((('g', 7),))
##d.update([('h', 8), ('i', 9)])
##d.update(zip('jk',(11,22)))
##d.update((('a', 111),))
##print(d)
##
##d1 = d.fromkeys((100, 'XYZ', 3.14), 0)
##print(d1)
##d2 = dict.fromkeys('abcde', 'hi')
##print(d2)
##d3 = dict.fromkeys('123')
##print(d3)

############################################################
# [26-3] 문자별 횟수 세기
############################################################

##n = '2378C946C736B8B30B38B478749ZZ928623234234'
##
##c1 = {}
##
##for x in set(n):
##    c1[x] = n.count(x)
##
##c2 = dict(map(lambda x : (x, n.count(x)), set(n)))
##
##c3 = {x : n.count(x) for x in set(n)}
##
##print(c1, c2, c3, sep = '\n')

############################################################
# [26-4] 단어별 개수 세기
############################################################

##s = input().split()
##
### 코드 작성
##
##print('\n'.join('{0} : {1}'.format(*x) for x in d))

############################################################
# [C] 
############################################################

##import sys
##
##f1 = open('score1.csv', 'r')
##d = f1.read()
##f1.close()
##
##print(d)
##
### 코드 작성
##
##f2 = open('score2.csv', 'w')
##f2.write(r)
##f2.close()
